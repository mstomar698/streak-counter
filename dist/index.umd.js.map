{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const KEY = 'streak';\r\n\r\nexport function formattedDate(date: Date): string {\r\n  return date.toLocaleDateString('en-US');\r\n}\r\n\r\nexport interface Streak {\r\n  currentCount: number;\r\n  startDate: string;\r\n  lastLoginDate: string;\r\n}\r\n\r\nexport function buildStack(\r\n  date: Date,\r\n  overrideDefaults?: Partial<Streak>\r\n): Streak {\r\n  const defaultStreak = {\r\n    currentCount: 1,\r\n    startDate: formattedDate(date),\r\n    lastLoginDate: formattedDate(date),\r\n  };\r\n\r\n  return {\r\n    ...defaultStreak,\r\n    ...overrideDefaults,\r\n  };\r\n}\r\n\r\nexport function updateStreak(storage: Storage, streak: Streak): void {\r\n  storage.setItem(KEY, JSON.stringify(streak))\r\n}","import { buildStack, formattedDate, Streak, KEY, updateStreak } from './utils';\r\n\r\n// export function differenceInDays(dateLeft: Date, dateRight: Date): number {\r\n//   const diffTime = Math.abs(dateLeft.getTime() - dateRight.getTime());\r\n//   const differenceInDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n//   return differenceInDays;\r\n// }\r\n\r\nfunction shouldIncrementOrResetStreakCount(\r\n  currentDate: Date,\r\n  lastLoginDate: string\r\n): 'increment' | 'reset' | 'none' {\r\n  // const difference = differenceInDays(currentDate, new Date(lastLoginDate));\r\n  const difference =\r\n    currentDate.getDate() - parseInt(lastLoginDate.split('/')[1]);\r\n  if (difference === 0) {\r\n    return 'none';\r\n  }\r\n\r\n  if (difference === 1) {\r\n    return 'increment';\r\n  }\r\n\r\n  return 'reset';\r\n}\r\n\r\nexport function streakCounter(storage: Storage, date: Date): Streak {\r\n  const streakInLocalStorage = storage.getItem(KEY);\r\n\r\n  if (streakInLocalStorage) {\r\n    try {\r\n      const streak = JSON.parse(streakInLocalStorage) as Streak;\r\n      const state = shouldIncrementOrResetStreakCount(\r\n        date,\r\n        streak.lastLoginDate\r\n      );\r\n      const SHOULD_INCREMENT = state === 'increment';\r\n      const SHOULD_RESET = state === 'reset';\r\n\r\n      if (SHOULD_INCREMENT) {\r\n        // const updatedStreak = {\r\n        //   ...streak,\r\n        const updatedStreak = buildStack(date, {\r\n          startDate: streak.startDate,\r\n          currentCount: streak.currentCount + 1,\r\n          lastLoginDate: formattedDate(date),\r\n        });\r\n        // update localStorage\r\n        updateStreak(storage, updatedStreak);\r\n        return updatedStreak;\r\n      }\r\n\r\n      if (SHOULD_RESET) {\r\n        // const updatedStreak: Streak = {\r\n        //   currentCount: 1,\r\n        //   startDate: formattedDate(date),\r\n        //   lastLoginDate: formattedDate(date),\r\n        // };\r\n        const updatedStreak = buildStack(date);\r\n        // update localStorage\r\n        storage.setItem(KEY, JSON.stringify(updatedStreak));\r\n        return updatedStreak;\r\n      }\r\n\r\n      return streak;\r\n    } catch (error) {\r\n      console.error('Failed to parse streak from localStorage');\r\n    }\r\n  }\r\n\r\n  // const streak = {\r\n  //   currentCount: 1,\r\n  //   startDate: formattedDate(date),\r\n  //   lastLoginDate: formattedDate(date),\r\n  // };\r\n  const streak = buildStack(date);\r\n\r\n  storage.setItem(KEY, JSON.stringify(streak));\r\n\r\n  return streak;\r\n}\r\n"],"names":["KEY","formattedDate","date","toLocaleDateString","buildStack","overrideDefaults","defaultStreak","currentCount","startDate","lastLoginDate","storage","difference","streakInLocalStorage","getItem","JSON","parse","state","streak","getDate","parseInt","split","SHOULD_RESET","updatedStreak","setItem","stringify","updateStreak","_updatedStreak","error","console"],"mappings":"0cAAgBA,EAAG,SAEHC,SAAAA,EAAcC,GAC5B,OAAWA,EAACC,mBAAmB,QACjC,CAQgBC,SAAAA,EACdF,EACAG,GAQA,OACKC,EAAAA,CAAAA,EAPiB,CACpBC,aAAc,EACdC,UAAWP,EAAcC,GACzBO,cAAeR,EAAcC,IAK1BG,EAEP,iBCCgB,SAAcK,EAAkBR,GAC9C,IAjBAO,EAGgBE,EAcVC,EAAuBF,EAAQG,QAAQb,GAE7C,GAAIY,EACF,IACE,MAAeE,KAAKC,MAAMH,GACpBI,GAtBVP,EAwBMQ,EAAOR,cAnBM,IAFHE,EAoBVT,EAnBQgB,UAAYC,SAASV,EAAcW,MAAM,KAAK,KAEnD,OAGU,IAAfT,EACK,YAGF,SAcGU,EAAyB,UAAVL,EAErB,GAHmC,cAAVA,EAGH,CAGpB,IAAmBM,EAAGlB,EAAWF,EAAM,CACrCM,UAAWS,EAAOT,UAClBD,aAAcU,EAAOV,aAAe,EACpCE,cAAeR,EAAcC,KAI/B,ODtBQ,SAAaQ,EAAkBO,GAC7CP,EAAQa,QAAQvB,EAAKc,KAAKU,UAAUP,GACtC,CCmBQQ,CAAaf,EAASY,GACfA,CACR,CAED,GAAID,EAAc,CAMhB,IAAmBK,EAAGtB,EAAWF,GAGjC,OADAQ,EAAQa,QAAQvB,EAAKc,KAAKU,UAAUF,IAErCI,CAAA,CAED,OAAOT,CAGR,CAFC,MAAOU,GACPC,QAAQD,MAAM,2CACf,CAQH,IAAMV,EAASb,EAAWF,GAI1B,OAFAQ,EAAQa,QAAQvB,EAAKc,KAAKU,UAAUP,IAGtCA,CAAA"}